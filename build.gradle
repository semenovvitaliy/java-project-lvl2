plugins {
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '3.2.0'
}

group 'hexlet.code'
version '1.0-SNAPSHOT'

application {
    mainClass = 'hexlet.code.App'
}

compileJava {
    options.release = 17
    /*options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]*/
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    implementation 'info.picocli:picocli:4.6.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.3'
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
    applyTo run
}
tasks.register('applicationCodeCoverageReport', JacocoReport) {
    executionData run
    sourceSets sourceSets.main
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    /*jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
        enabled = true
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }*/
}
jacocoTestReport {
    dependsOn test
    /*reports {
        xml.required = true
        /*csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }*/
}
testlogger {
    showStandardStreams true
}
/*jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}*/
